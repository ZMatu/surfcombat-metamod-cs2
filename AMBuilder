import os

MMSPlugin.plugin_name = 'surfcombatcs2'

for sdk_name in MMSPlugin.sdks:
  for cxx in MMSPlugin.all_targets:
    sdk = MMSPlugin.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    if binary.compiler.family == 'gcc' or binary.compiler.family == 'clang':
      binary.compiler.cxxflags += ['--std=c++17']
    elif binary.compiler.family == 'msvc':
      binary.compiler.cxxflags += ['/std:c++17']

    if binary.compiler.family == 'clang':
      binary.compiler.cxxflags += ['-Wno-register']

    binary.compiler.cxxincludes += [
      os.path.join(builder.sourcePath, 'src'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2', 'public', 'entity2'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2', 'game', 'server'),
      os.path.join(builder.sourcePath, 'vendor', 'subhook'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
      os.path.join(builder.sourcePath, 'vendor', 'protobuf-21.x', 'src'),
    ]

    if binary.compiler.target.platform == 'linux':
      binary.compiler.postlink += [
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libfunchook.a'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libdistorm.a'),
        os.path.join(builder.sourcePath, 'vendor', 'protobuf-lib', 'libprotobuf.a'),
        os.path.join(sdk.path, 'lib', 'linux64', 'mathlib.a'),
      ] 
      binary.sources += ['src/utils/plat_linux.cpp']
    elif binary.compiler.target.platform == 'windows':
      binary.compiler.postlink += [
        os.path.join('psapi.lib'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'funchook.lib'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'distorm.lib'),
        os.path.join(builder.sourcePath, 'vendor', 'protobuf-lib', 'libprotobuf.lib'),
		os.path.join(builder.sourcePath, 'hl2sdk-cs2', 'lib', 'public', 'win64', 'steam_api64.lib')
      ]
      binary.sources += ['src/utils/plat_win.cpp']

    binary.sources += [
      os.path.join(builder.sourcePath, 'src', 'sc_main.cpp'),
      os.path.join(sdk.path, 'entity2', 'entitysystem.cpp'),
      os.path.join(sdk.path, 'tier1', 'generichash.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'utils.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'detours.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'schema.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'simplecmds.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'ctimer.cpp'),
      os.path.join(builder.sourcePath, 'src', 'utils', 'events.cpp'),
      os.path.join(builder.sourcePath, 'src', 'movement', 'mv_hooks.cpp'),
      os.path.join(builder.sourcePath, 'src', 'movement', 'mv_manager.cpp'),
      os.path.join(builder.sourcePath, 'src', 'movement', 'mv_player.cpp'),
      os.path.join(builder.sourcePath, 'src', 'surf', 'sc_hud.cpp'),
      os.path.join(builder.sourcePath, 'src', 'surf', 'sc_commands.cpp'),
      os.path.join(builder.sourcePath, 'src', 'surf', 'sc_manager.cpp'),
      os.path.join(builder.sourcePath, 'src', 'surf', 'sc_player.cpp'),
    ]

    if sdk_name in ['cs2']:
      binary.sources += [
      os.path.join(sdk.path, 'tier1', 'convar.cpp'),
      os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp'),
    ]

    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]
    
  break
